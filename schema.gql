# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregatePost {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

type JWTTokenInput {
  access_token: String!
}

type Mutation {
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  signIn(email: String!, password: String!): JWTTokenInput!
  signUp(confirmPassword: String!, email: String!, name: String!, password: String!): User!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Post {
  content: String
  createdById: String!
  id: String!
  published: Boolean!
  title: String!
  updatedById: String!
}

type PostCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  createdById: Int!
  deleted: Int!
  id: Int!
  published: Int!
  title: Int!
  updatedAt: Int!
  updatedById: Int!
}

input PostCountOrderByAggregateInput {
  content: SortOrder
  createdById: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedById: SortOrder
}

input PostCreateInput {
  content: String
  id: String
  published: Boolean
  title: String!
}

input PostCreateManyInput {
  content: String
  createdById: String!
  id: String
  published: Boolean
  title: String!
  updatedById: String!
}

type PostGroupBy {
  _count: PostCountAggregate
  _max: PostMaxAggregate
  _min: PostMinAggregate
  content: String
  createdAt: DateTimeISO!
  createdById: String!
  deleted: Boolean!
  id: String!
  published: Boolean!
  title: String!
  updatedAt: DateTimeISO!
  updatedById: String!
}

type PostMaxAggregate {
  content: String
  createdAt: DateTimeISO
  createdById: String
  deleted: Boolean
  id: String
  published: Boolean
  title: String
  updatedAt: DateTimeISO
  updatedById: String
}

input PostMaxOrderByAggregateInput {
  content: SortOrder
  createdById: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedById: SortOrder
}

type PostMinAggregate {
  content: String
  createdAt: DateTimeISO
  createdById: String
  deleted: Boolean
  id: String
  published: Boolean
  title: String
  updatedAt: DateTimeISO
  updatedById: String
}

input PostMinOrderByAggregateInput {
  content: SortOrder
  createdById: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedById: SortOrder
}

input PostOrderByWithAggregationInput {
  _count: PostCountOrderByAggregateInput
  _max: PostMaxOrderByAggregateInput
  _min: PostMinOrderByAggregateInput
  content: SortOrderInput
  createdById: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedById: SortOrder
}

input PostOrderByWithRelationInput {
  content: SortOrderInput
  createdById: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedById: SortOrder
}

enum PostScalarFieldEnum {
  content
  createdAt
  createdById
  deleted
  id
  published
  title
  updatedAt
  updatedById
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  content: StringNullableWithAggregatesFilter
  createdById: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  published: BoolWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedById: StringWithAggregatesFilter
}

input PostUpdateInput {
  content: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  content: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  content: StringNullableFilter
  createdById: StringFilter
  id: StringFilter
  published: BoolFilter
  title: StringFilter
  updatedById: StringFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  content: StringNullableFilter
  createdById: StringFilter
  id: String
  published: BoolFilter
  title: StringFilter
  updatedById: StringFilter
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstPostOrThrow(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getPost(where: PostWhereUniqueInput!): Post
  getUser(where: UserWhereUniqueInput!): User
  groupByPost(by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, orderBy: [PostOrderByWithAggregationInput!], skip: Int, take: Int, where: PostWhereInput): [PostGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  createdById: String

  """@zod.email({ message: "please enter a valid email" })"""
  email: String!
  id: String!
  name: String
  role: Role!
  updatedById: String
  verified: Boolean!
}

type UserCount {
  postCreated(where: PostWhereInput): Int!
  postUpdated(where: PostWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  createdById: Int!
  deleted: Int!
  email: Int!
  id: Int!
  name: Int!
  password: Int!
  role: Int!
  updatedAt: Int!
  updatedById: Int!
  verified: Int!
}

input UserCountOrderByAggregateInput {
  createdById: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedById: SortOrder
  verified: SortOrder
}

input UserCreateInput {
  email: String!
  id: String
  name: String
  password: String!
  role: Role
  verified: Boolean
}

input UserCreateManyInput {
  createdById: String
  email: String!
  id: String
  name: String
  password: String!
  role: Role
  updatedById: String
  verified: Boolean
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTimeISO!
  createdById: String
  deleted: Boolean!
  email: String!
  id: String!
  name: String
  password: String!
  role: Role!
  updatedAt: DateTimeISO!
  updatedById: String
  verified: Boolean!
}

type UserMaxAggregate {
  createdAt: DateTimeISO
  createdById: String
  deleted: Boolean
  email: String
  id: String
  name: String
  password: String
  role: Role
  updatedAt: DateTimeISO
  updatedById: String
  verified: Boolean
}

input UserMaxOrderByAggregateInput {
  createdById: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedById: SortOrder
  verified: SortOrder
}

type UserMinAggregate {
  createdAt: DateTimeISO
  createdById: String
  deleted: Boolean
  email: String
  id: String
  name: String
  password: String
  role: Role
  updatedAt: DateTimeISO
  updatedById: String
  verified: Boolean
}

input UserMinOrderByAggregateInput {
  createdById: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedById: SortOrder
  verified: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdById: SortOrderInput
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  password: SortOrder
  role: SortOrder
  updatedById: SortOrderInput
  verified: SortOrder
}

input UserOrderByWithRelationInput {
  createdById: SortOrderInput
  email: SortOrder
  id: SortOrder
  name: SortOrderInput
  password: SortOrder
  role: SortOrder
  updatedById: SortOrderInput
  verified: SortOrder
}

enum UserScalarFieldEnum {
  createdAt
  createdById
  deleted
  email
  id
  name
  password
  role
  updatedAt
  updatedById
  verified
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdById: StringNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  password: StringWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  updatedById: StringNullableWithAggregatesFilter
  verified: BoolWithAggregatesFilter
}

input UserUpdateInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdById: StringNullableFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  password: StringFilter
  role: EnumRoleFilter
  updatedById: StringNullableFilter
  verified: BoolFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdById: String
  email: String
  id: String
  name: StringNullableFilter
  password: StringFilter
  role: EnumRoleFilter
  updatedById: String
  verified: BoolFilter
}