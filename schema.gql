# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type JWTTokenInput {
  access_token: String!
}

type Query {
  aggregateUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int): AggregateUser!
  findFirstUser(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User
  findFirstUserOrThrow(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): User
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  user(where: UserWhereUniqueInput!): User
  getUser(where: UserWhereUniqueInput!): User
  groupByUser(where: UserWhereInput, orderBy: [UserOrderByWithAggregationInput!], by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, take: Int, skip: Int): [UserGroupBy!]!
}

type AggregateUser {
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserCountAggregate {
  id: Int!
  email: Int!
  password: Int!
  firstName: Int!
  lastName: Int!
  lastLogin: Int!
  isAdmin: Int!
  isActive: Int!
  dateJoined: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  email: String
  password: String
  firstName: String
  lastName: String
  lastLogin: DateTime
  isAdmin: Boolean
  isActive: Boolean
  dateJoined: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserMaxAggregate {
  id: String
  email: String
  password: String
  firstName: String
  lastName: String
  lastLogin: DateTime
  isAdmin: Boolean
  isActive: Boolean
  dateJoined: DateTime
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  password: StringFilter
  firstName: StringNullableFilter
  lastName: StringNullableFilter
  lastLogin: DateTimeFilter
  isAdmin: BoolFilter
  isActive: BoolFilter
  dateJoined: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrderInput
  lastName: SortOrderInput
  lastLogin: SortOrder
  isAdmin: SortOrder
  isActive: SortOrder
  dateJoined: SortOrder
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  password: StringFilter
  firstName: StringNullableFilter
  lastName: StringNullableFilter
  lastLogin: DateTimeFilter
  isAdmin: BoolFilter
  isActive: BoolFilter
  dateJoined: DateTimeFilter
}

type User {
  id: String!

  """@zod.email({ message: "please enter a valid email" })"""
  email: String!
  firstName: String
  lastName: String
  isAdmin: Boolean!
  isActive: Boolean!
}

enum UserScalarFieldEnum {
  id
  email
  password
  firstName
  lastName
  lastLogin
  isAdmin
  isActive
  dateJoined
}

type UserGroupBy {
  id: String!
  email: String!
  password: String!
  firstName: String
  lastName: String
  lastLogin: DateTime!
  isAdmin: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  _count: UserCountAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrderInput
  lastName: SortOrderInput
  lastLogin: SortOrder
  isAdmin: SortOrder
  isActive: SortOrder
  dateJoined: SortOrder
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  lastLogin: SortOrder
  isAdmin: SortOrder
  isActive: SortOrder
  dateJoined: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  lastLogin: SortOrder
  isAdmin: SortOrder
  isActive: SortOrder
  dateJoined: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  lastLogin: SortOrder
  isAdmin: SortOrder
  isActive: SortOrder
  dateJoined: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  firstName: StringNullableWithAggregatesFilter
  lastName: StringNullableWithAggregatesFilter
  lastLogin: DateTimeWithAggregatesFilter
  isAdmin: BoolWithAggregatesFilter
  isActive: BoolWithAggregatesFilter
  dateJoined: DateTimeWithAggregatesFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

type Mutation {
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  signIn(input: SignInInput!): JWTTokenInput!
  signUp(input: SignupInput!): User!
}

type AffectedRowsOutput {
  count: Int!
}

input UserCreateManyInput {
  id: String
  email: String!
  password: String!
  firstName: String
  lastName: String
  lastLogin: DateTime
  isAdmin: Boolean
  isActive: Boolean
  dateJoined: DateTime
}

input UserCreateInput {
  id: String
  email: String!
  password: String!
  firstName: String
  lastName: String
  lastLogin: DateTime
  isAdmin: Boolean
  isActive: Boolean
  dateJoined: DateTime
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  dateJoined: DateTimeFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  firstName: NullableStringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  isAdmin: BoolFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  dateJoined: DateTimeFieldUpdateOperationsInput
}

input SignInInput {
  email: String!
  password: String!
}

input SignupInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  confirmPassword: String!
}